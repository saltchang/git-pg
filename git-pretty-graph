#!/bin/bash

git_pretty_graph() {
    SOLO=
    HEAD=
    JUMP=0

    while [ $# -gt 0 ]; do
        key="$1"

        case $key in
            -s|--solo)
            SOLO=YES
            shift # past argument
            ;;

            -h|--head)
            HEAD=YES
            shift # past argument
            ;;

            *)    # unknown option
            echo "Unknown argument: $1"
            return
            ;;
        esac
    done

    FORMAT_STRING='%C(bold #ee9f5e)%h: %C(reset)%C(#f6ff78)%s%C(reset) %C(auto)%d%C(reset)%n          %C(bold #35b59b)%as%C(reset) %C(bold #4ee681)(%ar)%C(reset) %C(bold #60b5dd)<%an>%C(reset)%n'

    GIT_GRAPH_COMMAND="git log --graph --decorate --color=always"

    if [ "$HEAD" = "YES" ]; then
        JUMP=0
    else
        JUMP=$(eval "$GIT_GRAPH_COMMAND" 2> /dev/null | grep -n -m 1 "HEAD ->" | sed  's/\([0-9]*\).*/\1/')
    fi

    GIT_GRAPH_COMMAND="${GIT_GRAPH_COMMAND} --format=format:'$FORMAT_STRING'"

    if [ ! "$SOLO" = "YES" ]; then
        GIT_GRAPH_COMMAND="${GIT_GRAPH_COMMAND} --all"
    fi

    GIT_GRAPH_COMMAND="${GIT_GRAPH_COMMAND} 2> /dev/null || return"

    if [ -d .git ]; then
        eval "$GIT_GRAPH_COMMAND | less -j$JUMP -R -p \"(HEAD ->)[^,)]*\""
    else
        git rev-parse --git-dir 2> /dev/null;
        printf "\nYou are not in a git repository.\n"
    fi;

    return
}

git_pretty_graph "$@"
